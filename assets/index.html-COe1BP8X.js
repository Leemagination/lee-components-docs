import{_ as e,c as a,o as n,a as t}from"./app-D-8A7lxN.js";const s={},r=t('<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>lee-vue3-components是一个以学习为主要目的的vue3组件库，目前有36个组件</p><p>组件都是用typescript以jsx的形式编写，使用时用import方式引入组件且不用手动引入css文件</p><p>github地址: <a href="https://github.com/Leemagination/vue3-components" target="_blank" rel="noopener noreferrer">https://github.com/Leemagination/vue3-components</a></p><h2 id="组件" tabindex="-1"><a class="header-anchor" href="#组件"><span>组件</span></a></h2><p>现有36个组件，本文档每个组件的展示都带有使用时的代码写法<br> 按组件开发的角度分为以下4类</p><h4 id="简单组件" tabindex="-1"><a class="header-anchor" href="#简单组件"><span><strong>简单组件</strong></span></a></h4><p>每个组件都是可以独立编写的，基本无需先开发公共功能。样式较为简单且开发的难度也不算大</p><h4 id="浮层组件" tabindex="-1"><a class="header-anchor" href="#浮层组件"><span><strong>浮层组件</strong></span></a></h4><p>此类组件都需要先开发出一个能动态插入body节点的浮层遮罩能力，并且把内容展现在遮罩上，且内容展示的位置和触发浮层的元素的位置有关联。而且每个新打开的浮层的层级要比上一个高</p><h4 id="命令式组件" tabindex="-1"><a class="header-anchor" href="#命令式组件"><span><strong>命令式组件</strong></span></a></h4><p>此类组件也是浮层组件，但是需要用命令式调用而不是声明式组件。命令式调用都是生成新的实例，无需担心数据的重置问题</p><h4 id="复杂组件" tabindex="-1"><a class="header-anchor" href="#复杂组件"><span><strong>复杂组件</strong></span></a></h4><p>此类组件一般是逻辑复杂，会根据props进行各种条件判断，或者展示不同的样式内容，有一定的开发难度</p>',14),o=[r];function i(p,h){return n(),a("div",null,o)}const l=e(s,[["render",i],["__file","index.html.vue"]]),d=JSON.parse('{"path":"/","title":"简介","lang":"en-US","frontmatter":{"title":"简介"},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"组件","slug":"组件","link":"#组件","children":[]}],"git":{"updatedTime":1733929648000,"contributors":[{"name":"Leemagination","email":"328445543@qq.com","commits":2}]},"filePathRelative":"README.md"}');export{l as comp,d as data};
